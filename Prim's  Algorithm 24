#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 10

// Adjacency matrix representation of the graph
int adj_matrix[MAX_VERTICES][MAX_VERTICES];

// MST array to store the edges in the MST
int mst[MAX_VERTICES][2];

// visited array to keep track of visited vertices
bool visited[MAX_VERTICES];

// Function to find the minimum spanning tree of the graph
void Prim(int source_vertex) {
  // Initialize the MST array
  for (int i = 0; i < MAX_VERTICES; i++) {
    mst[i][0] = -1;
    mst[i][1] = -1;
  }

  // Mark the source vertex as visited
  visited[source_vertex] = true;

  // Initialize the minimum weight
  int min_weight = INT_MAX;

  // Iterate over all the vertices
  for (int i = 0; i < MAX_VERTICES; i++) {
    // Find the vertex with the minimum weight that is not yet visited
    int min_vertex = -1;
    for (int j = 0; j < MAX_VERTICES; j++) {
      if (!visited[j] && adj_matrix[source_vertex][j] < min_weight) {
        min_vertex = j;
        min_weight = adj_matrix[source_vertex][j];
      }
    }

    // Add the edge connecting the source vertex and the minimum vertex to the MST
    mst[i][0] = source_vertex;
    mst[i][1] = min_vertex;

    // Mark the minimum vertex as visited
    visited[min_vertex] = true;

    // Update the minimum weight
    for (int j = 0; j < MAX_VERTICES; j++) {
      if (!visited[j] && adj_matrix[min_vertex][j] < min_weight) {
        min_weight = adj_matrix[min_vertex][j];
      }
    }
  }
}

// Driver code
int main() {
  // Initialize the adjacency matrix
  for (int i = 0; i < MAX_VERTICES; i++) {
    for (int j = 0; j < MAX_VERTICES; j++) {
      adj_matrix[i][j] = 0;
    }
  }

  // Add edges to the graph
  adj_matrix[0][1] = 1;
  adj_matrix[0][2] = 1;
  adj_matrix[1][3] = 1;
  adj_matrix[2][4] = 1;
  adj_matrix[3][5] = 1;

  // Source vertex
  int source_vertex = 0;

  // Print the edges in the MST
  for (int i = 0; i < MAX_VERTICES; i++) {
    if (mst[i][0] != -1) {
      printf("(%d, %d)\n", mst[i][0], mst[i][1]);
    }
  }

  return 0;
}
