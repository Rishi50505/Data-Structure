#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 10

// Adjacency matrix representation of the graph
int adj_matrix[MAX_VERTICES][MAX_VERTICES];

// MST array to store the edges in the MST
int mst[MAX_VERTICES][2];

// parent array to store the parent of each vertex
int parent[MAX_VERTICES];

// Function to find the minimum spanning tree of the graph
void Kruskal() {
  // Initialize the MST array
  for (int i = 0; i < MAX_VERTICES; i++) {
    mst[i][0] = -1;
    mst[i][1] = -1;
  }

  // Initialize the parent array
  for (int i = 0; i < MAX_VERTICES; i++) {
    parent[i] = i;
  }

  // Create a priority queue to store the edges
  struct Edge {
    int u;
    int v;
    int weight;
  };

  priority_queue<Edge> pq;

  // Add all the edges to the priority queue
  for (int i = 0; i < MAX_VERTICES; i++) {
    for (int j = 0; j < MAX_VERTICES; j++) {
      if (adj_matrix[i][j] != 0) {
        pq.push({i, j, adj_matrix[i][j]});
      }
    }
  }

  // While the priority queue is not empty
  while (!pq.empty()) {
    // Remove the edge with the minimum weight from the priority queue
    Edge edge = pq.top();
    pq.pop();

    // Check if the edge does not create a cycle
    int u = edge.u;
    int v = edge.v;
    int p = parent[u];
    int q = parent[v];
    if (p != q) {
      // Add the edge to the MST
      mst[i][0] = u;
      mst[i][1] = v;

      // Union the two sets
      parent[p] = q;
    }
  }
}

// Driver code
int main() {
  // Initialize the adjacency matrix
  for (int i = 0; i < MAX_VERTICES; i++) {
    for (int j = 0; j < MAX_VERTICES; j++) {
      adj_matrix[i][j] = 0;
    }
  }

  // Add edges to the graph
  adj_matrix[0][1] = 1;
  adj_matrix[0][2] = 1;
  adj_matrix[1][3] = 1;
  adj_matrix[2][4] = 1;
  adj_matrix[3][5] = 1;

  // Print the edges in the MST
  for (int i = 0; i < MAX_VERTICES; i++) {
    if (mst[i][0] != -1) {
      printf("(%d, %d)\n", mst[i][0], mst[i][1]);
    }
  }

  return 0;
}
