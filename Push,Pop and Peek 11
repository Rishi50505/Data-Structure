#include <stdio.h>

#define MAX_SIZE 100

struct Stack {
    int arr[MAX_SIZE];
    int top;
};

// Function to initialize the stack
void initialize(struct Stack* stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
int isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(struct Stack* stack, int data) {
    if (isFull(stack)) {
        printf("Stack Overflow. Cannot push element.\n");
    } else {
        stack->top++;
        stack->arr[stack->top] = data;
        printf("Pushed %d onto the stack.\n", data);
    }
}

// Function to pop an element from the stack
void pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow. Cannot pop element.\n");
    } else {
        int data = stack->arr[stack->top];
        stack->top--;
        printf("Popped %d from the stack.\n", data);
    }
}

// Function to peek at the top element of the stack
void peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. No elements to peek.\n");
    } else {
        int data = stack->arr[stack->top];
        printf("Top element of the stack: %d\n", data);
    }
}

int main() {
    struct Stack stack;
    initialize(&stack);

    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);
    peek(&stack);
    pop(&stack);
    peek(&stack);
    pop(&stack);
    peek(&stack);
    pop(&stack);
    pop(&stack);

    return 0;
}
